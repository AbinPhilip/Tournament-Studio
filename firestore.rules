rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow public read for tournaments, teams, organizations, sponsors, and matches
    match /tournaments/{docId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    match /teams/{docId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
     match /organizations/{docId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
     match /sponsors/{docId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    match /matches/{docId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
     match /rolePermissions/{role} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super';
    }

    // Rules for the 'images' collection
    match /images/{imageId} {
      // Any authenticated user can create an image document.
      // The `uploaderId` in the document must match their own user ID.
      allow create: if isAuthenticated() && request.resource.data.uploaderId == request.auth.uid;

      // Any authenticated user can read any image document.
      allow read: if isAuthenticated();
      
      // Only the user who uploaded the image can delete the document.
      allow delete: if isAuthenticated() && resource.data.uploaderId == request.auth.uid;
      
      // No one can update an image document after it's created.
      allow update: if false;
    }
  }
}
